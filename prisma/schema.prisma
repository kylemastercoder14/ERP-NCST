generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Admin {
  id        String @id @default(cuid())
  email     String @unique
  firstName String
  lastName  String
  password  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserAccount {
  id       String @id @default(cuid())
  email    String @unique
  password String

  employeeId String
  Employee   Employee @relation(fields: [employeeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Logs            Logs[]
  LeaveManagement LeaveManagement[]

  @@index([employeeId])
}

model JobTitle {
  id   String @id @default(cuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Employee Employee[]
}

model Department {
  id   String @id @default(cuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Employee Employee[]
}

model Employee {
  id                String   @id @default(cuid())
  licenseNo         String
  expiryDate        String
  firstName         String
  middleName        String?
  lastName          String
  presentAddress    String
  provincialAddress String
  telNo             String?
  celNo             String
  dateOfBirth       String
  placeOfBirth      String
  civilStatus       String
  citizenship       String
  religion          String
  height            String
  weight            String
  sex               String
  spouseName        String?
  spouseOccupation  String?
  spouseAddress     String?
  fatherName        String
  motherName        String
  fatherOccupation  String
  motherOccupation  String
  parentAddress     String
  languages         String[]
  contactPerson     String
  contactAddress    String
  contactNumber     String
  branch            String   @default("Cavite") // Cavite or Batangas

  tinNo        String
  sssNo        String
  philhealthNo String
  pagibigNo    String

  signature      String
  isNewEmployee  Boolean @default(true)
  trainingStatus String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  jobTitleId String
  JobTitle   JobTitle @relation(fields: [jobTitleId], references: [id])

  departmentId String
  Department   Department @relation(fields: [departmentId], references: [id])

  clientId String?
  Client   Client? @relation(fields: [clientId], references: [id])

  Children              Children[]
  EducationRecord       EducationRecord[]
  EmploymentRecord      EmploymentRecord[]
  CharacterReferences   CharacterReferences[]
  UserAccount           UserAccount[]
  LeaveManagement       LeaveManagement[]
  BaseSalary            BaseSalary[]
  GovernmentMandatories GovernmentMandatories[]
  Attendance            Attendance[]
  ExtraShift            ExtraShift[]
  PaySlip               PaySlip[]
  AccomplishmentReport  AccomplishmentReport[]
  Withdrawal            Withdrawal[]

  requestedPRs PurchaseRequest[] @relation("RequestedBy")
  receivedPRs  PurchaseRequest[] @relation("ReceivedBy")

  @@index([jobTitleId])
  @@index([departmentId])
  @@index([clientId])
}

model Children {
  id          String @id @default(cuid())
  name        String
  dateOfBirth String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String?
  Employee   Employee? @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
}

model EducationRecord {
  id           String  @id @default(cuid())
  level        String
  course       String?
  school       String
  address      String
  yearGraduate String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String?
  Employee   Employee? @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
}

model CharacterReferences {
  id         String @id @default(cuid())
  name       String
  occupation String
  address    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String?
  Employee   Employee? @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
}

model EmploymentRecord {
  id          String @id @default(cuid())
  companyName String
  position    String
  dateFrom    String
  dateTo      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String?
  Employee   Employee? @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
}

model LeaveManagement {
  id                 String   @id @default(cuid())
  leaveType          String
  startDate          String
  endDate            String
  leaveReason        String
  status             String   @default("Pending")
  attachment         String?
  reasonForRejection String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  employeeId String
  Employee   Employee @relation(fields: [employeeId], references: [id])

  approvedById String?
  ApprovedBy   UserAccount? @relation(fields: [approvedById], references: [id])

  @@index([employeeId])
  @@index([approvedById])
}

model BaseSalary {
  id     String @id @default(cuid())
  type   String //fixed, daily, hourly wages
  amount Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String
  Employee   Employee @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
}

model GovernmentMandatories {
  id         String @id @default(cuid())
  sss        Float
  philhealth Float
  pagibig    Float
  tin        Float
  others     Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String
  Employee   Employee @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
}

model Attendance {
  id        String   @id @default(cuid())
  date      String
  timeIn    String
  timeOut   String
  status    String // Present, Absent, Late
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String
  Employee   Employee @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
}

model ExtraShift {
  id                 String   @id @default(cuid())
  type               String // Overtime, Graveyard, Undertime
  date               String
  timeStart          String
  timeEnd            String
  status             String   @default("Pending")
  reasonForRejection String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  employeeId String
  Employee   Employee @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
}

model PaySlip {
  id        String   @id @default(cuid())
  file      String
  date      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String
  Employee   Employee @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
}

model Items {
  id          String   @id @default(cuid())
  name        String
  unitPrice   Float
  description String?
  supplierId  String
  Supplier    Supplier @relation(fields: [supplierId], references: [id])
  isSmallItem Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  PurchaseRequestItem PurchaseRequestItem[]
  WithdrawalItem      WithdrawalItem[]
  Inventory           Inventory[]

  @@index([supplierId])
}

model PurchaseRequest {
  id           String  @id @default(cuid())
  purchaseCode String
  department   String
  isEdited     Boolean @default(false)

  financeStatus String  @default("Pending") // Pending, Approved, Rejected, Returned
  financeRemark String?

  supplierStatus String  @default("Pending") // Pending, Preparing, In transit, Delivered, Rejected
  supplierRemark String?

  inventoryStatus String  @default("Pending") // Pending, Received, Rejected
  inventoryRemark String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Employee who requested
  employeeId  String
  requestedBy Employee @relation(name: "RequestedBy", fields: [employeeId], references: [id])

  // Employee who received
  receivedBy       String?
  receivedEmployee Employee? @relation(name: "ReceivedBy", fields: [receivedBy], references: [id])

  PurchaseRequestItem PurchaseRequestItem[]

  @@index([employeeId])
  @@index([receivedBy])
}

model Withdrawal {
  id             String @id @default(cuid())
  withdrawalCode String
  department     String

  status String @default("Pending") // Pending, Approved, Rejected

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String
  Employee   Employee @relation(fields: [employeeId], references: [id])

  WithdrawalItem WithdrawalItem[]

  @@index([employeeId])
}

model WithdrawalItem {
  id       String @id @default(cuid())
  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  itemId String
  Item   Items  @relation(fields: [itemId], references: [id])

  withdrawalId String
  Withdrawal   Withdrawal @relation(fields: [withdrawalId], references: [id])

  @@index([withdrawalId])
  @@index([itemId])
}

model PurchaseRequestItem {
  id          String @id @default(cuid())
  itemId      String
  Item        Items  @relation(fields: [itemId], references: [id])
  quantity    Int
  totalAmount Float

  financeItemStatus   String @default("Pending") // Pending, Approved, Rejected
  supplierItemStatus  String @default("Pending") // Pending, Preparing, In transit, Delivered, Rejected
  inventoryItemStatus String @default("Pending") // Pending, Received, Rejected

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  purchaseRequestId String
  PurchaseRequest   PurchaseRequest @relation(fields: [purchaseRequestId], references: [id])

  @@index([purchaseRequestId])
  @@index([itemId])
}

model Inventory {
  id         String   @id @default(cuid())
  itemId     String
  Item       Items    @relation(fields: [itemId], references: [id])
  quantity   Int
  supplierId String
  Supplier   Supplier @relation(fields: [supplierId], references: [id])
  status     String   @default("In stock") // In stock, Running out of stock, Out of stock
  treshold   Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([itemId])
  @@index([supplierId])
}

model AccomplishmentReport {
  id        String   @id @default(cuid())
  report    String
  images    String[]
  date      String
  remarks   String?
  isViewed  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String
  Employee   Employee @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
}

model Client {
  id        String  @id @default(cuid())
  name      String
  email     String  @unique
  password  String
  logo      String?
  address   String
  contactNo String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Employee    Employee[]
  Transaction Transaction[]
}

model Supplier {
  id        String  @id @default(cuid())
  name      String
  email     String  @unique
  password  String
  logo      String?
  address   String
  contactNo String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Transaction Transaction[]
  Items       Items[]
  Inventory   Inventory[]
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  INCOME
  EXPENSE
}

enum TransactionType {
  DEBIT
  CREDIT
}

model Transaction {
  id          String          @id @default(cuid())
  name        String
  amount      Float
  type        TransactionType // enum: DEBIT or CREDIT
  accountType AccountType // enum: ASSET, LIABILITY, EQUITY, INCOME, EXPENSE
  supplierId  String?
  Supplier    Supplier?       @relation(fields: [supplierId], references: [id])
  clientId    String?
  Client      Client?         @relation(fields: [clientId], references: [id])
  description String?
  status      String          @default("Unpaid")
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([supplierId])
  @@index([clientId])
}

model Logs {
  id String @id @default(cuid())

  action    String
  createdAt DateTime @default(now())

  userId String
  User   UserAccount @relation(fields: [userId], references: [id])

  @@index([userId])
}
