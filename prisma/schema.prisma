generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Admin {
  id        String @id @default(cuid())
  email     String @unique
  firstName String
  lastName  String
  password  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ApplicantRequest {
  id                 String              @id @default(cuid())
  totalApplicants    Int
  genderRequirements GenderRequirement[]
  minAge             Int
  maxAge             Int
  clientId           String
  Client             Client              @relation(fields: [clientId], references: [id])
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@index([clientId])
}

model GenderRequirement {
  id                 String           @id @default(cuid())
  gender             String
  count              Int
  applicantRequestId String
  applicantRequest   ApplicantRequest @relation(fields: [applicantRequestId], references: [id])

  @@index([applicantRequestId])
}

model ApplicantList {
  id           String      @id @default(cuid())
  email        String      @unique
  firstName    String
  lastName     String
  resume       String
  status       String      @default("Pending") // Pending, Interviewed, Hired, Rejected
  branch       String      @default("Cavite")
  departmentId String?
  Department   Department? @relation(fields: [departmentId], references: [id])
  jobTitleId   String?
  JobTitle     JobTitle?   @relation(fields: [jobTitleId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  JobPosting   JobPosting? @relation(fields: [jobPostingId], references: [id])
  jobPostingId String?

  @@index([jobPostingId])
  @@index([departmentId])
  @@index([jobTitleId])
}

model JobPosting {
  id             String      @id @default(cuid())
  title          String
  description    String
  attachment     String
  status         String      @default("Open")
  finacialStatus String      @default("Pending")
  jobTitleId     String?
  JobTitle       JobTitle?   @relation(fields: [jobTitleId], references: [id])
  departmentId   String?
  department     Department? @relation(fields: [departmentId], references: [id])
  branch         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  applicantList ApplicantList[]

  @@index([departmentId])
  @@index([jobTitleId])
}

model UserAccount {
  id       String @id @default(cuid())
  email    String @unique
  password String

  employeeId String
  Employee   Employee @relation(fields: [employeeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Logs            Logs[]
  LeaveManagement LeaveManagement[]

  @@index([employeeId])
}

model JobTitle {
  id   String @id @default(cuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Employee      Employee[]
  ApplicantList ApplicantList[]
  JobPosting    JobPosting[]
}

model Department {
  id   String @id @default(cuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Employee      Employee[]
  ApplicantList ApplicantList[]
  JobPosting    JobPosting[]
  Logs          Logs[]
}

model Employee {
  id                String   @id @default(cuid())
  profilePicture    String?
  licenseNo         String?
  expiryDate        String?
  firstName         String
  middleName        String?
  lastName          String
  presentAddress    String
  provincialAddress String
  telNo             String?
  celNo             String
  dateOfBirth       String
  placeOfBirth      String
  civilStatus       String
  citizenship       String
  religion          String
  height            String
  weight            String
  sex               String
  spouseName        String?
  spouseOccupation  String?
  spouseAddress     String?
  fatherName        String
  motherName        String
  fatherOccupation  String
  motherOccupation  String
  parentAddress     String
  languages         String[]
  contactPerson     String
  contactAddress    String
  contactNumber     String
  branch            String   @default("Cavite") // Cavite or Batangas

  tinNo        String
  sssNo        String
  philhealthNo String
  pagibigNo    String

  signature      String
  isNewEmployee  Boolean @default(true)
  trainingStatus String?
  status         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  jobTitleId String
  JobTitle   JobTitle @relation(fields: [jobTitleId], references: [id])

  departmentId String
  Department   Department @relation(fields: [departmentId], references: [id])

  clientId String?
  Client   Client? @relation(fields: [clientId], references: [id])

  Children              Children[]
  EducationRecord       EducationRecord[]
  EmploymentRecord      EmploymentRecord[]
  CharacterReferences   CharacterReferences[]
  UserAccount           UserAccount[]
  LeaveManagement       LeaveManagement[]
  BaseSalary            BaseSalary[]
  GovernmentMandatories GovernmentMandatories[]
  Attendance            Attendance[]
  ExtraShift            ExtraShift[]
  PaySlip               PaySlip[]
  AccomplishmentReport  AccomplishmentReport[]
  Withdrawal            Withdrawal[]

  requestedPRs         PurchaseRequest[]      @relation("RequestedBy")
  receivedPRs          PurchaseRequest[]      @relation("ReceivedBy")
  EmployeeLeaveBalance EmployeeLeaveBalance[]
  Evaluation           Evaluation[]
  Ticket               Ticket[]

  @@index([jobTitleId])
  @@index([departmentId])
  @@index([clientId])
}

model Children {
  id          String @id @default(cuid())
  name        String
  dateOfBirth String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String?
  Employee   Employee? @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
}

model EducationRecord {
  id           String  @id @default(cuid())
  level        String
  course       String?
  school       String
  address      String
  yearGraduate String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String?
  Employee   Employee? @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
}

model CharacterReferences {
  id         String @id @default(cuid())
  name       String
  occupation String
  address    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String?
  Employee   Employee? @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
}

model EmploymentRecord {
  id          String @id @default(cuid())
  companyName String
  position    String
  dateFrom    String
  dateTo      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String?
  Employee   Employee? @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
}

model LeaveManagement {
  id                 String   @id @default(cuid())
  leaveType          String
  startDate          String
  endDate            String
  leaveReason        String
  status             String   @default("Pending")
  attachment         String?
  reasonForRejection String?
  isPaid             Boolean  @default(true)
  daysUsed           Int
  year               Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  employeeId String
  Employee   Employee @relation(fields: [employeeId], references: [id])

  approvedById String?
  ApprovedBy   UserAccount? @relation(fields: [approvedById], references: [id])

  @@index([employeeId])
  @@index([approvedById])
}

model EmployeeLeaveBalance {
  id             String   @id @default(cuid())
  year           Int
  paidLeaveUsed  Int      @default(0)
  paidLeaveTotal Int      @default(5)
  lastResetDate  DateTime @default(now())

  employeeId String
  Employee   Employee @relation(fields: [employeeId], references: [id])

  @@unique([employeeId, year])
}

model BaseSalary {
  id     String @id @default(cuid())
  type   String //fixed, daily, hourly wages
  amount Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status String  @default("Pending")
  reason String?

  employeeId String
  Employee   Employee @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
}

model GovernmentMandatories {
  id         String @id @default(cuid())
  sss        Float
  philhealth Float
  pagibig    Float
  tin        Float
  others     Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String
  Employee   Employee @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
}

model Attendance {
  id        String   @id @default(cuid())
  date      String
  timeIn    String
  timeOut   String
  status    String // Present, Absent, Late
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String
  Employee   Employee @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
}

model ExtraShift {
  id                 String   @id @default(cuid())
  type               String // Overtime, Graveyard, Undertime
  date               String
  timeStart          String
  timeEnd            String
  status             String   @default("Pending")
  reasonForRejection String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  employeeId String
  Employee   Employee @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
}

model PaySlip {
  id        String   @id @default(cuid())
  file      String
  date      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String
  Employee   Employee @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
}

model Items {
  id            String   @id @default(cuid())
  name          String
  unitPrice     Float
  description   String?
  specification String?
  supplierId    String
  Supplier      Supplier @relation(fields: [supplierId], references: [id])
  isSmallItem   Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  PurchaseRequestItem PurchaseRequestItem[]
  WithdrawalItem      WithdrawalItem[]
  Inventory           Inventory[]

  @@index([supplierId])
}

model PurchaseRequest {
  id           String  @id @default(cuid())
  purchaseCode String
  department   String
  isEdited     Boolean @default(false)

  financeStatus String  @default("Pending") // Pending, Approved, Rejected, Returned
  financeRemark String?

  supplierStatus String  @default("Pending") // Pending, Preparing, In transit, Delivered, Rejected
  supplierRemark String?

  inventoryStatus String  @default("Pending") // Pending, Received, Rejected
  inventoryRemark String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Employee who requested
  employeeId  String
  requestedBy Employee @relation(name: "RequestedBy", fields: [employeeId], references: [id])

  // Employee who received
  receivedBy       String?
  receivedEmployee Employee? @relation(name: "ReceivedBy", fields: [receivedBy], references: [id])

  PurchaseRequestItem PurchaseRequestItem[]

  @@index([employeeId])
  @@index([receivedBy])
}

model Withdrawal {
  id             String @id @default(cuid())
  withdrawalCode String
  department     String

  status  String  @default("Pending")
  remarks String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String
  Employee   Employee @relation(fields: [employeeId], references: [id])

  WithdrawalItem WithdrawalItem[]

  @@index([employeeId])
}

model WithdrawalItem {
  id       String @id @default(cuid())
  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  itemId String
  Item   Items  @relation(fields: [itemId], references: [id])

  withdrawalId String
  Withdrawal   Withdrawal @relation(fields: [withdrawalId], references: [id])

  @@index([withdrawalId])
  @@index([itemId])
}

model PurchaseRequestItem {
  id          String @id @default(cuid())
  itemId      String
  Item        Items  @relation(fields: [itemId], references: [id])
  quantity    Int
  totalAmount Float

  financeItemStatus   String @default("Pending") // Pending, Approved, Rejected
  supplierItemStatus  String @default("Pending") // Pending, Preparing, In transit, Delivered, Rejected
  inventoryItemStatus String @default("Pending") // Pending, Received, Rejected

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  purchaseRequestId String
  PurchaseRequest   PurchaseRequest @relation(fields: [purchaseRequestId], references: [id])

  @@index([purchaseRequestId])
  @@index([itemId])
}

model Inventory {
  id         String   @id @default(cuid())
  itemId     String
  Item       Items    @relation(fields: [itemId], references: [id])
  quantity   Int
  supplierId String
  Supplier   Supplier @relation(fields: [supplierId], references: [id])
  status     String   @default("In stock") // In stock, Running out of stock, Out of stock
  treshold   Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([itemId])
  @@index([supplierId])
}

model AccomplishmentReport {
  id        String   @id @default(cuid())
  report    String
  images    String[]
  date      String
  remarks   String?
  isViewed  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String
  Employee   Employee @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
}

model Client {
  id        String  @id @default(cuid())
  name      String
  email     String  @unique
  password  String
  logo      String?
  address   String
  contactNo String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Employee         Employee[]
  Transaction      Transaction[]
  Evaluation       Evaluation[]
  Ticket           Ticket[]
  ApplicantRequest ApplicantRequest[]
}

model Supplier {
  id        String  @id @default(cuid())
  name      String
  email     String  @unique
  password  String
  logo      String?
  address   String
  contactNo String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Transaction Transaction[]
  Items       Items[]
  Inventory   Inventory[]
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  INCOME
  EXPENSE
}

enum TransactionType {
  DEBIT
  CREDIT
}

model Transaction {
  id             String          @id @default(cuid())
  name           String
  amount         Float
  type           TransactionType // enum: DEBIT or CREDIT
  accountType    AccountType // enum: ASSET, LIABILITY, EQUITY, INCOME, EXPENSE
  subAccountType String
  journalEntryId String?
  attachment     String?
  supplierId     String?
  Supplier       Supplier?       @relation(fields: [supplierId], references: [id])
  clientId       String?
  Client         Client?         @relation(fields: [clientId], references: [id])
  description    String?
  status         String          @default("Unpaid")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([supplierId])
  @@index([clientId])
}

model Logs {
  id String @id @default(cuid())

  action       String
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])
  createdAt    DateTime   @default(now())

  userId String
  User   UserAccount @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([departmentId])
}

model Evaluation {
  id       String   @id @default(cuid())
  date     DateTime
  average  Float
  summary  String
  comments String?

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  clientId String?
  client   Client? @relation(fields: [clientId], references: [id])

  ratings EvaluationRating[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
  @@index([clientId])
}

model EvaluationRating {
  id          String  @id @default(cuid())
  criteria    String
  description String
  rating      Int
  comments    String?

  evaluationId String
  evaluation   Evaluation @relation(fields: [evaluationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([evaluationId])
}

enum TicketType {
  technical
  billing
  general
  employee
  other
}

enum TicketPriority {
  low
  medium
  high
  critical
}

enum TicketStatus {
  Open
  InProgress
  Resolved
  Closed
}

model Contact {
  id      String @id @default(cuid())
  name    String
  email   String
  subject String
  message String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ticket {
  id          String         @id @default(cuid())
  title       String
  description String
  type        TicketType
  priority    TicketPriority
  status      TicketStatus   @default(Open)
  attachments String[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  employeeId String?
  employee   Employee? @relation(fields: [employeeId], references: [id])
  clientId   String?
  client     Client?   @relation(fields: [clientId], references: [id])

  @@index([employeeId])
  @@index([clientId])
}

model SiteSettings {
  id                 String    @id @default(cuid())
  maintenanceMode    Boolean   @default(false)
  maintenanceEndDate DateTime?
  maintenanceMessage String?   @default("We're currently performing scheduled maintenance. Please check back soon.")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
