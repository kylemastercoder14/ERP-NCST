generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Admin {
  id        String @id @default(cuid())
  email     String @unique
  firstName String
  lastName  String
  password  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserAccount {
  id       String @id @default(cuid())
  email    String @unique
  password String

  otpCode         String?
  otpExpiry       DateTime?
  isEmailVerified Boolean   @default(false)
  isAdminVerified Boolean   @default(false)

  employeeId String
  Employee   Employee @relation(fields: [employeeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Logs Logs[]

  @@index([employeeId])
}

model JobTitle {
  id   String @id @default(cuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Employee Employee[]
}

model Department {
  id   String @id @default(cuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Employee Employee[]
}

model Employee {
  id                String   @id @default(cuid())
  licenseNo         String
  expiryDate        String
  firstName         String
  middleName        String?
  lastName          String
  presentAddress    String
  provincialAddress String
  telNo             String?
  celNo             String
  dateOfBirth       String
  placeOfBirth      String
  civilStatus       String
  citizenship       String
  religion          String
  height            String
  weight            String
  sex               String
  spouseName        String?
  spouseOccupation  String?
  spouseAddress     String?
  fatherName        String
  motherName        String
  fatherOccupation  String
  motherOccupation  String
  parentAddress     String
  languages         String[]
  contactPerson     String
  contactAddress    String
  contactNumber     String

  tinNo        String
  sssNo        String
  philhealthNo String
  pagibigNo    String

  signature String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  jobTitleId String
  JobTitle   JobTitle @relation(fields: [jobTitleId], references: [id])

  departmentId String?
  Department   Department? @relation(fields: [departmentId], references: [id])

  Children            Children[]
  EducationRecord     EducationRecord[]
  EmploymentRecord    EmploymentRecord[]
  CharacterReferences CharacterReferences[]
  UserAccount         UserAccount[]

  @@index([jobTitleId])
  @@index([departmentId])
}

model Children {
  id          String @id @default(cuid())
  name        String
  dateOfBirth String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String?
  Employee   Employee? @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
}

model EducationRecord {
  id           String  @id @default(cuid())
  level        String
  course       String?
  school       String
  address      String
  yearGraduate String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String?
  Employee   Employee? @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
}

model CharacterReferences {
  id         String @id @default(cuid())
  name       String
  occupation String
  address    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String?
  Employee   Employee? @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
}

model EmploymentRecord {
  id          String @id @default(cuid())
  companyName String
  position    String
  dateFrom    String
  dateTo      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String?
  Employee   Employee? @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
}

model Logs {
  id String @id @default(cuid())

  action    String
  createdAt DateTime @default(now())

  userId String
  User   UserAccount @relation(fields: [userId], references: [id])

  @@index([userId])
}
